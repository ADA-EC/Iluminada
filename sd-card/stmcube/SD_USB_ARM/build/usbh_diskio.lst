ARM GAS  /tmp/ccVq23ps.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"usbh_diskio.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.USBH_initialize,"ax",%progbits
  22              		.align	2
  23              		.global	USBH_initialize
  24              		.thumb
  25              		.thumb_func
  27              	USBH_initialize:
  28              	.LFB124:
  29              		.file 1 "Src/usbh_diskio.c"
   1:Src/usbh_diskio.c **** /**
   2:Src/usbh_diskio.c ****   ******************************************************************************
   3:Src/usbh_diskio.c ****   * @file    usbh_diskio.c (based on usbh_diskio_template.c)
   4:Src/usbh_diskio.c ****   * @brief   USB Host Disk I/O driver
   5:Src/usbh_diskio.c ****   ******************************************************************************
   6:Src/usbh_diskio.c ****   * This notice applies to any and all portions of this file
   7:Src/usbh_diskio.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/usbh_diskio.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/usbh_diskio.c ****   * inserted by the user or by software development tools
  10:Src/usbh_diskio.c ****   * are owned by their respective copyright owners.
  11:Src/usbh_diskio.c ****   *
  12:Src/usbh_diskio.c ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/usbh_diskio.c ****   * All rights reserved.
  14:Src/usbh_diskio.c ****   *
  15:Src/usbh_diskio.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/usbh_diskio.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/usbh_diskio.c ****   *
  18:Src/usbh_diskio.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/usbh_diskio.c ****   *    this list of conditions and the following disclaimer.
  20:Src/usbh_diskio.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/usbh_diskio.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/usbh_diskio.c ****   *    and/or other materials provided with the distribution.
  23:Src/usbh_diskio.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/usbh_diskio.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/usbh_diskio.c ****   *    derived from this software without specific written permission.
  26:Src/usbh_diskio.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/usbh_diskio.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/usbh_diskio.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/usbh_diskio.c ****   * 5. Redistribution and use of this software other than as permitted under 
ARM GAS  /tmp/ccVq23ps.s 			page 2


  30:Src/usbh_diskio.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/usbh_diskio.c ****   *    this license. 
  32:Src/usbh_diskio.c ****   *
  33:Src/usbh_diskio.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/usbh_diskio.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/usbh_diskio.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/usbh_diskio.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/usbh_diskio.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/usbh_diskio.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/usbh_diskio.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/usbh_diskio.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/usbh_diskio.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/usbh_diskio.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/usbh_diskio.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/usbh_diskio.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/usbh_diskio.c ****   *
  46:Src/usbh_diskio.c ****   ******************************************************************************
  47:Src/usbh_diskio.c ****   */
  48:Src/usbh_diskio.c **** /* USER CODE BEGIN firstSection */ 
  49:Src/usbh_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  50:Src/usbh_diskio.c **** /* USER CODE END firstSection */ 
  51:Src/usbh_diskio.c **** 
  52:Src/usbh_diskio.c **** /* Includes ------------------------------------------------------------------*/
  53:Src/usbh_diskio.c **** #include "ff_gen_drv.h"
  54:Src/usbh_diskio.c **** #include "usbh_diskio.h"
  55:Src/usbh_diskio.c **** 
  56:Src/usbh_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  57:Src/usbh_diskio.c **** /* Private define ------------------------------------------------------------*/
  58:Src/usbh_diskio.c **** /* Private variables ---------------------------------------------------------*/
  59:Src/usbh_diskio.c **** extern USBH_HandleTypeDef  hUSB_Host;
  60:Src/usbh_diskio.c **** 
  61:Src/usbh_diskio.c **** /* Private function prototypes -----------------------------------------------*/
  62:Src/usbh_diskio.c **** DSTATUS USBH_initialize (BYTE);
  63:Src/usbh_diskio.c **** DSTATUS USBH_status (BYTE);
  64:Src/usbh_diskio.c **** DRESULT USBH_read (BYTE, BYTE*, DWORD, UINT);
  65:Src/usbh_diskio.c **** 
  66:Src/usbh_diskio.c **** #if _USE_WRITE == 1
  67:Src/usbh_diskio.c ****   DRESULT USBH_write (BYTE, const BYTE*, DWORD, UINT);
  68:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
  69:Src/usbh_diskio.c **** 
  70:Src/usbh_diskio.c **** #if _USE_IOCTL == 1
  71:Src/usbh_diskio.c ****   DRESULT USBH_ioctl (BYTE, BYTE, void*);
  72:Src/usbh_diskio.c **** #endif /* _USE_IOCTL == 1 */
  73:Src/usbh_diskio.c ****   
  74:Src/usbh_diskio.c **** const Diskio_drvTypeDef  USBH_Driver =
  75:Src/usbh_diskio.c **** {
  76:Src/usbh_diskio.c ****   USBH_initialize,
  77:Src/usbh_diskio.c ****   USBH_status,
  78:Src/usbh_diskio.c ****   USBH_read, 
  79:Src/usbh_diskio.c **** #if  _USE_WRITE == 1
  80:Src/usbh_diskio.c ****   USBH_write,
  81:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */  
  82:Src/usbh_diskio.c **** #if  _USE_IOCTL == 1
  83:Src/usbh_diskio.c ****   USBH_ioctl,
  84:Src/usbh_diskio.c **** #endif /* _USE_IOCTL == 1 */
  85:Src/usbh_diskio.c **** };
  86:Src/usbh_diskio.c **** 
ARM GAS  /tmp/ccVq23ps.s 			page 3


  87:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
  88:Src/usbh_diskio.c **** /* can be used to modify / undefine following code or add new code */
  89:Src/usbh_diskio.c **** /* USER CODE END beforeFunctionSection */
  90:Src/usbh_diskio.c **** 
  91:Src/usbh_diskio.c **** /* Private functions ---------------------------------------------------------*/
  92:Src/usbh_diskio.c **** 
  93:Src/usbh_diskio.c **** /**
  94:Src/usbh_diskio.c ****   * @brief  Initializes a Drive
  95:Src/usbh_diskio.c ****   * @param  lun : lun id
  96:Src/usbh_diskio.c ****   * @retval DSTATUS: Operation status
  97:Src/usbh_diskio.c ****   */
  98:Src/usbh_diskio.c **** DSTATUS USBH_initialize(BYTE lun)
  99:Src/usbh_diskio.c **** {
  30              		.loc 1 99 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
 100:Src/usbh_diskio.c ****   /* CAUTION : USB Host library has to be initialized in the application */
 101:Src/usbh_diskio.c ****   
 102:Src/usbh_diskio.c ****   return RES_OK;
 103:Src/usbh_diskio.c **** }
  36              		.loc 1 103 0
  37 0000 0020     		movs	r0, #0
  38              	.LVL1:
  39 0002 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE124:
  43              		.section	.text.USBH_status,"ax",%progbits
  44              		.align	2
  45              		.global	USBH_status
  46              		.thumb
  47              		.thumb_func
  49              	USBH_status:
  50              	.LFB125:
 104:Src/usbh_diskio.c **** 
 105:Src/usbh_diskio.c **** /**
 106:Src/usbh_diskio.c ****   * @brief  Gets Disk Status
 107:Src/usbh_diskio.c ****   * @param  lun : lun id
 108:Src/usbh_diskio.c ****   * @retval DSTATUS: Operation status
 109:Src/usbh_diskio.c ****   */
 110:Src/usbh_diskio.c **** DSTATUS USBH_status(BYTE lun)
 111:Src/usbh_diskio.c **** {
  51              		.loc 1 111 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              	.LVL2:
  56 0000 08B5     		push	{r3, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 3, -8
  60              		.cfi_offset 14, -4
  61              	.LVL3:
 112:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 113:Src/usbh_diskio.c ****   
ARM GAS  /tmp/ccVq23ps.s 			page 4


 114:Src/usbh_diskio.c ****   if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
  62              		.loc 1 114 0
  63 0002 0146     		mov	r1, r0
  64 0004 0348     		ldr	r0, .L6
  65              	.LVL4:
  66 0006 FFF7FEFF 		bl	USBH_MSC_UnitIsReady
  67              	.LVL5:
  68 000a 08B1     		cbz	r0, .L4
 115:Src/usbh_diskio.c ****   {
 116:Src/usbh_diskio.c ****     res = RES_OK;
  69              		.loc 1 116 0
  70 000c 0020     		movs	r0, #0
  71 000e 08BD     		pop	{r3, pc}
  72              	.L4:
 117:Src/usbh_diskio.c ****   }
 118:Src/usbh_diskio.c ****   else
 119:Src/usbh_diskio.c ****   {
 120:Src/usbh_diskio.c ****     res = RES_ERROR;
  73              		.loc 1 120 0
  74 0010 0120     		movs	r0, #1
  75              	.LVL6:
 121:Src/usbh_diskio.c ****   }
 122:Src/usbh_diskio.c ****   
 123:Src/usbh_diskio.c ****   return res;
 124:Src/usbh_diskio.c **** }
  76              		.loc 1 124 0
  77 0012 08BD     		pop	{r3, pc}
  78              	.L7:
  79              		.align	2
  80              	.L6:
  81 0014 00000000 		.word	hUsbHostFS
  82              		.cfi_endproc
  83              	.LFE125:
  85              		.section	.text.USBH_read,"ax",%progbits
  86              		.align	2
  87              		.global	USBH_read
  88              		.thumb
  89              		.thumb_func
  91              	USBH_read:
  92              	.LFB126:
 125:Src/usbh_diskio.c **** 
 126:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 127:Src/usbh_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 128:Src/usbh_diskio.c **** /* USER CODE END beforeReadSection */
 129:Src/usbh_diskio.c **** 
 130:Src/usbh_diskio.c **** /**
 131:Src/usbh_diskio.c ****   * @brief  Reads Sector(s) 
 132:Src/usbh_diskio.c ****   * @param  lun : lun id
 133:Src/usbh_diskio.c ****   * @param  *buff: Data buffer to store read data
 134:Src/usbh_diskio.c ****   * @param  sector: Sector address (LBA)
 135:Src/usbh_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 136:Src/usbh_diskio.c ****   * @retval DRESULT: Operation result
 137:Src/usbh_diskio.c ****   */
 138:Src/usbh_diskio.c **** DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 139:Src/usbh_diskio.c **** {
  93              		.loc 1 139 0
  94              		.cfi_startproc
ARM GAS  /tmp/ccVq23ps.s 			page 5


  95              		@ args = 0, pretend = 0, frame = 56
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              	.LVL7:
  98 0000 10B5     		push	{r4, lr}
  99              	.LCFI1:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 4, -8
 102              		.cfi_offset 14, -4
 103 0002 90B0     		sub	sp, sp, #64
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 72
 106 0004 0446     		mov	r4, r0
 107              	.LVL8:
 140:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 141:Src/usbh_diskio.c ****   MSC_LUNTypeDef info;
 142:Src/usbh_diskio.c **** 
 143:Src/usbh_diskio.c ****   if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 108              		.loc 1 143 0
 109 0006 0093     		str	r3, [sp]
 110 0008 0B46     		mov	r3, r1
 111              	.LVL9:
 112 000a 0146     		mov	r1, r0
 113              	.LVL10:
 114 000c 0B48     		ldr	r0, .L15
 115              	.LVL11:
 116 000e FFF7FEFF 		bl	USBH_MSC_Read
 117              	.LVL12:
 118 0012 70B1     		cbz	r0, .L11
 144:Src/usbh_diskio.c ****   {
 145:Src/usbh_diskio.c ****     res = RES_OK;
 146:Src/usbh_diskio.c ****   }
 147:Src/usbh_diskio.c ****   else
 148:Src/usbh_diskio.c ****   {
 149:Src/usbh_diskio.c ****     USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info); 
 119              		.loc 1 149 0
 120 0014 03AA     		add	r2, sp, #12
 121 0016 2146     		mov	r1, r4
 122 0018 0848     		ldr	r0, .L15
 123 001a FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 124              	.LVL13:
 150:Src/usbh_diskio.c ****     
 151:Src/usbh_diskio.c ****     switch (info.sense.asc)
 125              		.loc 1 151 0
 126 001e 9DF81930 		ldrb	r3, [sp, #25]	@ zero_extendqisi2
 127 0022 282B     		cmp	r3, #40
 128 0024 03D0     		beq	.L10
 129 0026 3A2B     		cmp	r3, #58
 130 0028 01D0     		beq	.L10
 131 002a 042B     		cmp	r3, #4
 132 002c 03D1     		bne	.L13
 133              	.L10:
 152:Src/usbh_diskio.c ****     {
 153:Src/usbh_diskio.c ****     case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
 154:Src/usbh_diskio.c ****     case SCSI_ASC_MEDIUM_NOT_PRESENT:
 155:Src/usbh_diskio.c ****     case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
 156:Src/usbh_diskio.c ****       USBH_ErrLog ("USB Disk is not ready!");  
 157:Src/usbh_diskio.c ****       res = RES_NOTRDY;
ARM GAS  /tmp/ccVq23ps.s 			page 6


 134              		.loc 1 157 0
 135 002e 0320     		movs	r0, #3
 136 0030 02E0     		b	.L9
 137              	.L11:
 145:Src/usbh_diskio.c ****   }
 138              		.loc 1 145 0
 139 0032 0020     		movs	r0, #0
 140 0034 00E0     		b	.L9
 141              	.L13:
 158:Src/usbh_diskio.c ****       break; 
 159:Src/usbh_diskio.c ****       
 160:Src/usbh_diskio.c ****     default:
 161:Src/usbh_diskio.c ****       res = RES_ERROR;
 142              		.loc 1 161 0
 143 0036 0120     		movs	r0, #1
 144              	.L9:
 145              	.LVL14:
 162:Src/usbh_diskio.c ****       break;
 163:Src/usbh_diskio.c ****     }
 164:Src/usbh_diskio.c ****   }
 165:Src/usbh_diskio.c ****   
 166:Src/usbh_diskio.c ****   return res;
 167:Src/usbh_diskio.c **** }
 146              		.loc 1 167 0
 147 0038 10B0     		add	sp, sp, #64
 148              	.LCFI3:
 149              		.cfi_def_cfa_offset 8
 150              		@ sp needed
 151 003a 10BD     		pop	{r4, pc}
 152              	.L16:
 153              		.align	2
 154              	.L15:
 155 003c 00000000 		.word	hUsbHostFS
 156              		.cfi_endproc
 157              	.LFE126:
 159              		.section	.text.USBH_ioctl,"ax",%progbits
 160              		.align	2
 161              		.global	USBH_ioctl
 162              		.thumb
 163              		.thumb_func
 165              	USBH_ioctl:
 166              	.LFB128:
 168:Src/usbh_diskio.c **** 
 169:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 170:Src/usbh_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 171:Src/usbh_diskio.c **** /* USER CODE END beforeWriteSection */
 172:Src/usbh_diskio.c **** 
 173:Src/usbh_diskio.c **** /**
 174:Src/usbh_diskio.c ****   * @brief  Writes Sector(s)
 175:Src/usbh_diskio.c ****   * @param  lun : lun id 
 176:Src/usbh_diskio.c ****   * @param  *buff: Data to be written
 177:Src/usbh_diskio.c ****   * @param  sector: Sector address (LBA)
 178:Src/usbh_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 179:Src/usbh_diskio.c ****   * @retval DRESULT: Operation result
 180:Src/usbh_diskio.c ****   */
 181:Src/usbh_diskio.c **** #if _USE_WRITE == 1
 182:Src/usbh_diskio.c **** DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
ARM GAS  /tmp/ccVq23ps.s 			page 7


 183:Src/usbh_diskio.c **** {
 184:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR; 
 185:Src/usbh_diskio.c ****   MSC_LUNTypeDef info;
 186:Src/usbh_diskio.c **** 
 187:Src/usbh_diskio.c ****   if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 188:Src/usbh_diskio.c ****   {
 189:Src/usbh_diskio.c ****     res = RES_OK;
 190:Src/usbh_diskio.c ****   }
 191:Src/usbh_diskio.c ****   else
 192:Src/usbh_diskio.c ****   {
 193:Src/usbh_diskio.c ****     USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info); 
 194:Src/usbh_diskio.c ****     
 195:Src/usbh_diskio.c ****     switch (info.sense.asc)
 196:Src/usbh_diskio.c ****     {
 197:Src/usbh_diskio.c ****     case SCSI_ASC_WRITE_PROTECTED:
 198:Src/usbh_diskio.c ****       USBH_ErrLog("USB Disk is Write protected!");
 199:Src/usbh_diskio.c ****       res = RES_WRPRT;
 200:Src/usbh_diskio.c ****       break;
 201:Src/usbh_diskio.c ****       
 202:Src/usbh_diskio.c ****     case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
 203:Src/usbh_diskio.c ****     case SCSI_ASC_MEDIUM_NOT_PRESENT:
 204:Src/usbh_diskio.c ****     case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
 205:Src/usbh_diskio.c ****       USBH_ErrLog("USB Disk is not ready!");      
 206:Src/usbh_diskio.c ****       res = RES_NOTRDY;
 207:Src/usbh_diskio.c ****       break; 
 208:Src/usbh_diskio.c ****       
 209:Src/usbh_diskio.c ****     default:
 210:Src/usbh_diskio.c ****       res = RES_ERROR;
 211:Src/usbh_diskio.c ****       break;
 212:Src/usbh_diskio.c ****     }
 213:Src/usbh_diskio.c ****   }
 214:Src/usbh_diskio.c ****   
 215:Src/usbh_diskio.c ****   return res;   
 216:Src/usbh_diskio.c **** }
 217:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
 218:Src/usbh_diskio.c **** 
 219:Src/usbh_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 220:Src/usbh_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 221:Src/usbh_diskio.c **** /* USER CODE END beforeIoctlSection */
 222:Src/usbh_diskio.c **** 
 223:Src/usbh_diskio.c **** /**
 224:Src/usbh_diskio.c ****   * @brief  I/O control operation
 225:Src/usbh_diskio.c ****   * @param  lun : lun id
 226:Src/usbh_diskio.c ****   * @param  cmd: Control code
 227:Src/usbh_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 228:Src/usbh_diskio.c ****   * @retval DRESULT: Operation result
 229:Src/usbh_diskio.c ****   */
 230:Src/usbh_diskio.c **** #if _USE_IOCTL == 1
 231:Src/usbh_diskio.c **** DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
 232:Src/usbh_diskio.c **** {
 167              		.loc 1 232 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 56
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              	.LVL15:
 172 0000 10B5     		push	{r4, lr}
 173              	.LCFI4:
ARM GAS  /tmp/ccVq23ps.s 			page 8


 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 177 0002 8EB0     		sub	sp, sp, #56
 178              	.LCFI5:
 179              		.cfi_def_cfa_offset 64
 180 0004 1446     		mov	r4, r2
 181              	.LVL16:
 233:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR;
 234:Src/usbh_diskio.c ****   MSC_LUNTypeDef info;
 235:Src/usbh_diskio.c ****   
 236:Src/usbh_diskio.c ****   switch (cmd)
 182              		.loc 1 236 0
 183 0006 0329     		cmp	r1, #3
 184 0008 22D8     		bhi	.L24
 185 000a DFE801F0 		tbb	[pc, r1]
 186              	.L20:
 187 000e 02       		.byte	(.L19-.L20)/2
 188 000f 04       		.byte	(.L21-.L20)/2
 189 0010 0D       		.byte	(.L22-.L20)/2
 190 0011 17       		.byte	(.L23-.L20)/2
 191              		.p2align 1
 192              	.L19:
 237:Src/usbh_diskio.c ****   {
 238:Src/usbh_diskio.c ****   /* Make sure that no pending write process */
 239:Src/usbh_diskio.c ****   case CTRL_SYNC: 
 240:Src/usbh_diskio.c ****     res = RES_OK;
 193              		.loc 1 240 0
 194 0012 0020     		movs	r0, #0
 195              	.LVL17:
 196 0014 23E0     		b	.L18
 197              	.LVL18:
 198              	.L21:
 241:Src/usbh_diskio.c ****     break;
 242:Src/usbh_diskio.c ****     
 243:Src/usbh_diskio.c ****   /* Get number of sectors on the disk (DWORD) */  
 244:Src/usbh_diskio.c ****   case GET_SECTOR_COUNT : 
 245:Src/usbh_diskio.c ****     if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 199              		.loc 1 245 0
 200 0016 01AA     		add	r2, sp, #4
 201              	.LVL19:
 202 0018 0146     		mov	r1, r0
 203              	.LVL20:
 204 001a 1248     		ldr	r0, .L29
 205              	.LVL21:
 206 001c FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 207              	.LVL22:
 208 0020 C0B9     		cbnz	r0, .L25
 246:Src/usbh_diskio.c ****     {
 247:Src/usbh_diskio.c ****       *(DWORD*)buff = info.capacity.block_nbr;
 209              		.loc 1 247 0
 210 0022 029B     		ldr	r3, [sp, #8]
 211 0024 2360     		str	r3, [r4]
 212              	.LVL23:
 213 0026 1AE0     		b	.L18
 214              	.LVL24:
 215              	.L22:
ARM GAS  /tmp/ccVq23ps.s 			page 9


 248:Src/usbh_diskio.c ****       res = RES_OK;
 249:Src/usbh_diskio.c ****     }
 250:Src/usbh_diskio.c ****     else
 251:Src/usbh_diskio.c ****     {
 252:Src/usbh_diskio.c ****       res = RES_ERROR;
 253:Src/usbh_diskio.c ****     }
 254:Src/usbh_diskio.c ****     break;
 255:Src/usbh_diskio.c ****     
 256:Src/usbh_diskio.c ****   /* Get R/W sector size (WORD) */  
 257:Src/usbh_diskio.c ****   case GET_SECTOR_SIZE :	
 258:Src/usbh_diskio.c ****     if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 216              		.loc 1 258 0
 217 0028 01AA     		add	r2, sp, #4
 218              	.LVL25:
 219 002a 0146     		mov	r1, r0
 220              	.LVL26:
 221 002c 0D48     		ldr	r0, .L29
 222              	.LVL27:
 223 002e FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 224              	.LVL28:
 225 0032 88B9     		cbnz	r0, .L26
 259:Src/usbh_diskio.c ****     {
 260:Src/usbh_diskio.c ****       *(DWORD*)buff = info.capacity.block_size;
 226              		.loc 1 260 0
 227 0034 BDF80C30 		ldrh	r3, [sp, #12]
 228 0038 2360     		str	r3, [r4]
 229              	.LVL29:
 230 003a 10E0     		b	.L18
 231              	.LVL30:
 232              	.L23:
 261:Src/usbh_diskio.c ****       res = RES_OK;
 262:Src/usbh_diskio.c ****     }
 263:Src/usbh_diskio.c ****     else
 264:Src/usbh_diskio.c ****     {
 265:Src/usbh_diskio.c ****       res = RES_ERROR;
 266:Src/usbh_diskio.c ****     }
 267:Src/usbh_diskio.c ****     break;
 268:Src/usbh_diskio.c ****     
 269:Src/usbh_diskio.c ****     /* Get erase block size in unit of sector (DWORD) */ 
 270:Src/usbh_diskio.c ****   case GET_BLOCK_SIZE : 
 271:Src/usbh_diskio.c ****     
 272:Src/usbh_diskio.c ****     if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 233              		.loc 1 272 0
 234 003c 01AA     		add	r2, sp, #4
 235              	.LVL31:
 236 003e 0146     		mov	r1, r0
 237              	.LVL32:
 238 0040 0848     		ldr	r0, .L29
 239              	.LVL33:
 240 0042 FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 241              	.LVL34:
 242 0046 48B9     		cbnz	r0, .L27
 273:Src/usbh_diskio.c ****     {
 274:Src/usbh_diskio.c ****       *(DWORD*)buff = info.capacity.block_size;
 243              		.loc 1 274 0
 244 0048 BDF80C30 		ldrh	r3, [sp, #12]
 245 004c 2360     		str	r3, [r4]
ARM GAS  /tmp/ccVq23ps.s 			page 10


 246              	.LVL35:
 247 004e 06E0     		b	.L18
 248              	.LVL36:
 249              	.L24:
 275:Src/usbh_diskio.c ****       res = RES_OK;
 276:Src/usbh_diskio.c ****     }
 277:Src/usbh_diskio.c ****     else
 278:Src/usbh_diskio.c ****     {
 279:Src/usbh_diskio.c ****       res = RES_ERROR;
 280:Src/usbh_diskio.c ****     }
 281:Src/usbh_diskio.c ****     break;
 282:Src/usbh_diskio.c ****     
 283:Src/usbh_diskio.c ****   default:
 284:Src/usbh_diskio.c ****     res = RES_PARERR;
 250              		.loc 1 284 0
 251 0050 0420     		movs	r0, #4
 252              	.LVL37:
 253 0052 04E0     		b	.L18
 254              	.LVL38:
 255              	.L25:
 252:Src/usbh_diskio.c ****     }
 256              		.loc 1 252 0
 257 0054 0120     		movs	r0, #1
 258 0056 02E0     		b	.L18
 259              	.L26:
 265:Src/usbh_diskio.c ****     }
 260              		.loc 1 265 0
 261 0058 0120     		movs	r0, #1
 262 005a 00E0     		b	.L18
 263              	.L27:
 279:Src/usbh_diskio.c ****     }
 264              		.loc 1 279 0
 265 005c 0120     		movs	r0, #1
 266              	.LVL39:
 267              	.L18:
 285:Src/usbh_diskio.c ****   }
 286:Src/usbh_diskio.c ****   
 287:Src/usbh_diskio.c ****   return res;
 288:Src/usbh_diskio.c **** }
 268              		.loc 1 288 0
 269 005e 0EB0     		add	sp, sp, #56
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 8
 272              		@ sp needed
 273 0060 10BD     		pop	{r4, pc}
 274              	.LVL40:
 275              	.L30:
 276 0062 00BF     		.align	2
 277              	.L29:
 278 0064 00000000 		.word	hUsbHostFS
 279              		.cfi_endproc
 280              	.LFE128:
 282              		.section	.text.USBH_write,"ax",%progbits
 283              		.align	2
 284              		.global	USBH_write
 285              		.thumb
 286              		.thumb_func
ARM GAS  /tmp/ccVq23ps.s 			page 11


 288              	USBH_write:
 289              	.LFB127:
 183:Src/usbh_diskio.c ****   DRESULT res = RES_ERROR; 
 290              		.loc 1 183 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 56
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              	.LVL41:
 295 0000 10B5     		push	{r4, lr}
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 4, -8
 299              		.cfi_offset 14, -4
 300 0002 90B0     		sub	sp, sp, #64
 301              	.LCFI8:
 302              		.cfi_def_cfa_offset 72
 303 0004 0446     		mov	r4, r0
 304              	.LVL42:
 187:Src/usbh_diskio.c ****   {
 305              		.loc 1 187 0
 306 0006 0093     		str	r3, [sp]
 307 0008 0B46     		mov	r3, r1
 308              	.LVL43:
 309 000a 0146     		mov	r1, r0
 310              	.LVL44:
 311 000c 0F48     		ldr	r0, .L39
 312              	.LVL45:
 313 000e FFF7FEFF 		bl	USBH_MSC_Write
 314              	.LVL46:
 315 0012 A8B1     		cbz	r0, .L36
 193:Src/usbh_diskio.c ****     
 316              		.loc 1 193 0
 317 0014 03AA     		add	r2, sp, #12
 318 0016 2146     		mov	r1, r4
 319 0018 0C48     		ldr	r0, .L39
 320 001a FFF7FEFF 		bl	USBH_MSC_GetLUNInfo
 321              	.LVL47:
 195:Src/usbh_diskio.c ****     {
 322              		.loc 1 195 0
 323 001e 9DF81930 		ldrb	r3, [sp, #25]	@ zero_extendqisi2
 324 0022 272B     		cmp	r3, #39
 325 0024 08D0     		beq	.L34
 326 0026 02D8     		bhi	.L35
 327 0028 042B     		cmp	r3, #4
 328 002a 07D1     		bne	.L33
 329 002c 0AE0     		b	.L37
 330              	.L35:
 331 002e 282B     		cmp	r3, #40
 332 0030 08D0     		beq	.L37
 333 0032 3A2B     		cmp	r3, #58
 334 0034 02D1     		bne	.L33
 335 0036 05E0     		b	.L37
 336              	.L34:
 199:Src/usbh_diskio.c ****       break;
 337              		.loc 1 199 0
 338 0038 0220     		movs	r0, #2
 339 003a 04E0     		b	.L32
ARM GAS  /tmp/ccVq23ps.s 			page 12


 340              	.L33:
 210:Src/usbh_diskio.c ****       break;
 341              		.loc 1 210 0
 342 003c 0120     		movs	r0, #1
 211:Src/usbh_diskio.c ****     }
 343              		.loc 1 211 0
 344 003e 02E0     		b	.L32
 345              	.L36:
 189:Src/usbh_diskio.c ****   }
 346              		.loc 1 189 0
 347 0040 0020     		movs	r0, #0
 348 0042 00E0     		b	.L32
 349              	.L37:
 206:Src/usbh_diskio.c ****       break; 
 350              		.loc 1 206 0
 351 0044 0320     		movs	r0, #3
 352              	.L32:
 353              	.LVL48:
 216:Src/usbh_diskio.c **** #endif /* _USE_WRITE == 1 */
 354              		.loc 1 216 0
 355 0046 10B0     		add	sp, sp, #64
 356              	.LCFI9:
 357              		.cfi_def_cfa_offset 8
 358              		@ sp needed
 359 0048 10BD     		pop	{r4, pc}
 360              	.L40:
 361 004a 00BF     		.align	2
 362              	.L39:
 363 004c 00000000 		.word	hUsbHostFS
 364              		.cfi_endproc
 365              	.LFE127:
 367              		.global	USBH_Driver
 368              		.section	.rodata.USBH_Driver,"a",%progbits
 369              		.align	2
 372              	USBH_Driver:
 373 0000 00000000 		.word	USBH_initialize
 374 0004 00000000 		.word	USBH_status
 375 0008 00000000 		.word	USBH_read
 376 000c 00000000 		.word	USBH_write
 377 0010 00000000 		.word	USBH_ioctl
 378              		.text
 379              	.Letext0:
 380              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 381              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 382              		.file 4 "/home/ada/Downloads/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 383              		.file 5 "/home/ada/Downloads/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 384              		.file 6 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 385              		.file 7 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc_scsi.h"
 386              		.file 8 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 387              		.file 9 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 388              		.file 10 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccVq23ps.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 usbh_diskio.c
     /tmp/ccVq23ps.s:22     .text.USBH_initialize:00000000 $t
     /tmp/ccVq23ps.s:27     .text.USBH_initialize:00000000 USBH_initialize
     /tmp/ccVq23ps.s:44     .text.USBH_status:00000000 $t
     /tmp/ccVq23ps.s:49     .text.USBH_status:00000000 USBH_status
     /tmp/ccVq23ps.s:81     .text.USBH_status:00000014 $d
     /tmp/ccVq23ps.s:86     .text.USBH_read:00000000 $t
     /tmp/ccVq23ps.s:91     .text.USBH_read:00000000 USBH_read
     /tmp/ccVq23ps.s:155    .text.USBH_read:0000003c $d
     /tmp/ccVq23ps.s:160    .text.USBH_ioctl:00000000 $t
     /tmp/ccVq23ps.s:165    .text.USBH_ioctl:00000000 USBH_ioctl
     /tmp/ccVq23ps.s:187    .text.USBH_ioctl:0000000e $d
     /tmp/ccVq23ps.s:191    .text.USBH_ioctl:00000012 $t
     /tmp/ccVq23ps.s:278    .text.USBH_ioctl:00000064 $d
     /tmp/ccVq23ps.s:283    .text.USBH_write:00000000 $t
     /tmp/ccVq23ps.s:288    .text.USBH_write:00000000 USBH_write
     /tmp/ccVq23ps.s:363    .text.USBH_write:0000004c $d
     /tmp/ccVq23ps.s:372    .rodata.USBH_Driver:00000000 USBH_Driver
     /tmp/ccVq23ps.s:369    .rodata.USBH_Driver:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
USBH_MSC_UnitIsReady
hUsbHostFS
USBH_MSC_Read
USBH_MSC_GetLUNInfo
USBH_MSC_Write
